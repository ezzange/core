    hello.core.order.OrderServiceImpl.
    private final DiscountPolicy discountPolicy = new FixDiscountPolicy();//고정 할인
    private final DiscountPolicy rateDis countPolicy = new RateDiscountPolicy();//변동 할인
    구현체를 바꾸는 순간 개발자가 직접 코드를 변경해 주어야 한다. => DIP 위반.
    클라이언트는 인터페이스 뿐만 아니라 구현체도 의존하고 있다. => OCP 위반.

    이를 만족시키기 위해서는 관심사 분리가 필요하다.

    private DiscountPolicy discountPolicy;
    위는 구현체에만 의존하지 않고 인터페이스만 의존하는 코드 이지만 해당 코드로는 원하는 구현체로 연결되지 않아 NullPointException이 발생한다.
    이 문제를 해결하기 위해서는 개발자대신 클라이언트의 구현 객체를 대신 생성하고 주입해줄 중간 조율자가 필요하다.

    인터페이스에 어떤 구현체들이 할당될지는 중간 조율자가 할당해주도록 변경할 것 이다.
    AppConfig : 애플리케이션의 전체 동작 방식을 구성하기 위해 구현 객체를 생성하고 연결하는 역할을 가진 별도의 설정 클래스
                => 구현 객체를 생성하고 인스턴스 객체를 생성자 주입으로 연결 해준다.


    OrderServiceImpl 입장에서 생성자에서 어떤 구현 객체와 의존관계를 형성할 지 알 수 없고 이 의존관계를 주입해주는 것은 AppConfig에서 관리한다.

    private final MemberRepository memberRepository;
    private final DiscountPolicy discountPolicy;

    public OrderServiceImpl(MemberRepository memberRepository, DiscountPolicy discountPolicy) {
        this.memberRepository = memberRepository;
        this.discountPolicy = discountPolicy;
    }

    기존 OrderServiceImpl의 코드는 객체 생성 역할과 구현채의 역할 두가지를 했지만 AppConfig에서 객체 생성 및 연결 역할을 가져가 구현체의 역할만 남아
    구현체의 변경의 경우 OrderServiceImpl는 변경될 코드 없어 Appconfig의 변경만으로 고정 할인에서 변동 할인으로 변동할 수 있다.

이는 구성영역과 사용영역을 나눠 만약 구현체를 바꾸고 싶을 때 구성영역의 Appconfig의 코드만 변경 해주면 되는 것이다.
=> DIP, OCP 만족 또한 SRP 만족

